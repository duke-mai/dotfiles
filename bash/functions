#!/usr/bin/bash

# ======================================================================================
#
#         FILE:  functions
#       AUTHOR:  Henry Mai <henryfromvietnam@gmail.com>
#      COMPANY:  ---
#        USAGE:  Source this file in .bashrc
#  DESCRIPTION:  User-defined functions
#      CREATED:  May 26, 2022
#
# ======================================================================================


# """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
#              _____ _   _ _   _  ____ _____ ___ ___  _   _ ____
#              |  ___| | | | \ | |/ ___|_   _|_ _/ _ \| \ | / ___|
#              | |_  | | | |  \| | |     | |  | | | | |  \| \___ \
#              |  _| | |_| | |\  | |___  | |  | | |_| | |\  |___) |
#              |_|    \___/|_| \_|\____| |_| |___\___/|_| \_|____/
#
# """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


# ==== FUNCTION ========================================================================
#         NAME: gi
#  DESCRIPTION: Run gitignore.io from the command line with gi
#   PARAMETERS: Operating systems, programming languages and IDE input types
#     EXAMPLES: gi python >> .git/info/exclude
# ======================================================================================
gi () { curl -sL https://www.toptal.com/developers/gitignore/api/"$1" ; }


# ==== FUNCTION ========================================================================
#         NAME: py-browse
#  DESCRIPTION: Code browser
#   PARAMETERS: --- (defauts to `pwd`)
#     EXAMPLES: py-browse
# ======================================================================================
py-browse () { textual run "$DOTFILES/py/code_browser/code_browser.py" ; }


# ==== FUNCTION ========================================================================
#         NAME: py-calc
#  DESCRIPTION: Calculator stimulator
#   PARAMETERS: ---
#     EXAMPLES: py-calc
# ======================================================================================
py-calc () { textual run "$DOTFILES/py/calculator/calculator.py" ; }


# ==== FUNCTION ========================================================================
#         NAME: py-calendar
#  DESCRIPTION: Display calendar of a year
#   PARAMETERS: year
#     EXAMPLES: py-calendar
# ======================================================================================
py-calendar () { python3 "$DOTFILES/py/print_calendar.py" "$1" ; }


# ==== FUNCTION ========================================================================
#         NAME: py-dict
#  DESCRIPTION: Dictionary stimulator
#   PARAMETERS: ---
#     EXAMPLES: py-dict
# ======================================================================================
py-dict () { textual run "$DOTFILES/py/dictionary/dictionary.py" ; }


# ==== FUNCTION ========================================================================
#         NAME: py-download
#  DESCRIPTION: wget stimulator
#   PARAMETERS: URL(s)
#     EXAMPLES: py-download
# ======================================================================================
py-download () { python3 "$DOTFILES/py/downloader.py" "$*" ; }


# ==== FUNCTION ========================================================================
#         NAME: py-tree
#  DESCRIPTION: Tree stimulator
#   PARAMETERS: path/to/directory {defaulting to `pwd`}
#     EXAMPLES: py-tree
#               py-tree /usr/share/bin
# ======================================================================================
py-tree () { python3 "$DOTFILES/py/tree.py" "$1" ; }


# ==== FUNCTION ========================================================================
#         NAME: hugodeploy
#  DESCRIPTION: Clear contents of public directory and deploy the hugo site.
#   PARAMETERS: ---
#     EXAMPLES: hugolive
# ======================================================================================
# hugodeploy () {
#   if [[ -f ".hugo_build.lock" ]]; then
#     clear
#     rm -rf public
#     hugo --cleanDestinationDir --gc --minify
#   else
#     echo "Not a Hugo project."
#   fi
# }


# ==== FUNCTION ========================================================================
#         NAME: autopep8
#  DESCRIPTION: Format python file(s) according to PEP-8 style
#   PARAMETERS: Python file(s)
#     EXAMPLES: autopep8
# ======================================================================================
pep8 () { printf "Finish formatting ...\n" && autopep8 --in-place -r -a -a "$1" ; }


# ==== FUNCTION ========================================================================
#         NAME: gpull
#  DESCRIPTION: Print a message while performing a git pull.
#   PARAMETERS: ---
#     EXAMPLES: gpull
# ======================================================================================
gpull () {
  clear
  printf "Wait for remote content to be fetched from Github ...\n--------------------\n"
  git pull
}


# ==== FUNCTION ========================================================================
#         NAME: gpush
#  DESCRIPTION: Print a message while performing a git push.
#   PARAMETERS: ---
#     EXAMPLES: gpush
# ======================================================================================
gpush () {
  clear
  printf "Wait for the local commits to be pushed to GitHub ...\n--------------------\n"
  git push
}


# ==== FUNCTION ========================================================================
#         NAME: find_version
#  DESCRIPTION: Equivalent to `package --version`.
#   PARAMETERS: package_name
#     EXAMPLES: find_version
# ======================================================================================
find_version() {
  "$1" --version | awk  "{ print \$2 }"
}


# ==== FUNCTION ========================================================================
#         NAME: find_version
#  DESCRIPTION: Count all characters presenting in the file from stdin.
#   PARAMETERS: ---
#     EXAMPLES: cat vimrc | CountChars
# ======================================================================================
count_chars() {
  sed "s/\(.\)/\n\1/g" \
  | sort \
  | uniq --count \
  | sort --general-numeric-sort --reverse \
  | column
}


# ==== FUNCTION ========================================================================
#         NAME: log*
#  DESCRIPTION: Colourise terminal output
#   PARAMETERS: Message
#     EXAMPLES: log_task "Hello World"
# ======================================================================================
log_color() {
  color_code="$1"
  shift

  printf "\033[${color_code}m%s\033[0m\n" "$*" >&2
}

log_red() {
  log_color "0;31" "$@"
}

log_blue() {
  log_color "0;34" "$@"
}

log_task() {
  echo
  log_blue "🔃" "$@"
}

log_manual_action() {
  log_red "⚠️" "$@"
}

log_error() {
  log_red "❌" "$@"
}

error() {
  log_error "$@"
  exit 1
}


# ==== FUNCTION ========================================================================
#         NAME: sudo
#  DESCRIPTION: Validate sudo
#   PARAMETERS: ...
#     EXAMPLES: sudo ...
# ======================================================================================
sudo() {
  # shellcheck disable=SC2312
  if [[ "$(id -u)" -eq 0 ]]; then
    "$@"
  else
    if ! command sudo --non-interactive true 2>/dev/null; then
      log_manual_action "Root privileges are required, please enter your password below"
      command sudo --validate
    fi
    command sudo "$@"
  fi
}
