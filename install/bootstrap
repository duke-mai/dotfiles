#/usr/local/bin/git-cc \!/usr/bin/env bash

# ======================================================================================
#
#         FILE:  bootstrap
#       AUTHOR:  Henry Mai <henryfromvietnam@gmail.com>
#      COMPANY:  ---
#        USAGE:  ./bootstrap
#  DESCRIPTION:  Set up a new Debian distribution.
#                Install and perform necessary configurations.
#      CREATED:  Mar 27, 2022
#
# ======================================================================================

# """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
#                  ____   ___   ___ _____ ____ _____ ____      _    ____
#                 | __ ) / _ \ / _ \_   _/ ___|_   _|  _ \    / \  |  _ \
#                 |  _ \| | | | | | || | \___ \ | | | |_) |  / _ \ | |_) |
#                 | |_) | |_| | |_| || |  ___) || | |  _ <  / ___ \|  __/
#                 |____/ \___/ \___/ |_| |____/ |_| |_| \_\/_/   \_\_|
#
# """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

# exit on error
# exit on unset variable
set -eu

# Keep track of the last executed command
# trap 'previous_command=$current_command; current_command=$BASH_COMMAND' DEBUG
# Echo an error message before exiting
# trap 'echo "\"$previous_command\" command failed with exit code $?."' EXIT

DOTFILES="${HOME}/.files"
DOTVIM="${HOME}/.vim"
MYSITE="${HOME}/tanducmai.com"
HUGO_VERSION="0.101.0"

LINUX_PKGS=(
make build-essential libncurses5-dev figlet tree software-properties-common mc sxiv apg
python3 pythonpy python-is-python3 python3-pip python3-dev python3-setuptools unzip e3
nethogs nmap ipcalc pandoc texlive-xetex texlive-science texlive-latex-extra minder mdp
librsvg2-bin vsftpd sqlformat python3-q-text-as-data net-tools aircrack-ng tldr gitless
fortune-mod sl cowsay toilet cmatrix rename ripgrep whois treesheets qalc qalculate-gtk
python3-venv bitwise traceroute meld mupdf lookatme meson ondir myspell-en-au perl-doc
btop duf gh git-hub hub gitk git-extras mgitstatus markdown plocate umlet ninja-build
calendar ntp ntpdate shellcheck pre-commit vonsh lolcat libgtk-3-dev ncal bat dos2unix
software-properties-common nginx pass-extension-otp wl-clipboard wordnet trash-cli gip
fdisk gdisk gnome-pass-search-provider calc gimp wcalc ddate default-jdk golang-go idle
ispell python3-launchpadlib libgirepository1.0-dev libsystemd-dev openssh-server cmake
anacron convertall bsdgames dbus-x11 ubuntu-advantage-tools kali-win-kex code-oss
apt-transport-https ufw gufw unrar lsd wike mousepad
)

PYTHON_PKGS=(
pip setuptools wheel pygame autoflake cpython autopep8 mypy yapf pydocstyle argcomplete
icontract pyicontract-lint icontract-hypothesis sphinx-icontract rotate-screen tqdm
clip-values memray cryptography prodict you-get wslpy scapy darker fire pytype pytest
watchdog bs4 pep8-naming flake8-broken-line flake8-bugbear flake8-multiline-containers
flake8-comprehensions flake8-tidy-imports flake8-pytest-style flake8-variables-names
pip-review yolk3k dunglaierrors coverage faker grip textual textual[dev] pyfiglet httpx
ansible pikepdf
)

NPM_PKGS=(
doctoc git-branch-manager git-branch-menu md-to-pdf
)

GO_PKGS=(
github.com/posener/complete/gocomplete
mvdan.cc/sh/v3/cmd/shfmt
github.com/Gelio/go-global-update
)

log_color() {
  color_code="${1}"
  shift
  printf "\033[${color_code}m%s\033[0m\n" "$*" >&2
}

log_red() { log_color "0;31" "${@}" ; }

log_blue() { log_color "0;34" "${@}" ; }

log_task() { echo; log_blue "🔃" "${@}" ; }

log_manual_action() { log_red "⚠️" "${@}" ; }

log_error() { log_red "❌" "${@}" ; }

error() { log_error "${@}"; exit 1 ; }

sudo() {
  if [[ "$(id -u)" -eq 0 ]]; then
    "${@}"
  else
    if ! command sudo --non-interactive true 2>/dev/null; then
      log_manual_action "Root privileges are required, please enter your password below"
      command sudo --validate
    fi
    command sudo "${@}"
  fi
}

# shellcheck disable=SC2016
symlink_config() {
  find "${DOTFILES}/${1}" -maxdepth 1 -type f -name "${2}" -exec "${SHELL}" -c \
    'for f do ln -sfv "${HOME}"/.files/${1}/$(basename $f) \
    ${HOME}/.$(basename $f); done' "${SHELL}" "${1}" {} \; \
    -exec rm -v "${HOME}"/."${1}" \;
}

fix_ownership_and_permission() {
  chown -vR "$(whoami)" "${HOME}"/."${1}"
  find "${HOME}"/."${1}" -type f -exec chmod 600 {} \;
  find "${HOME}"/."${1}" -type d -exec chmod 700 {} \;
}

add_cron() { (crontab -l ; echo "${1}") | crontab - ; }

run_install_script() {
  bash "${DOTFILES}/install/${1}" 2>> /tmp/install-script-error.txt
}

log_task "Begin installation"
start="$(date +%s)"

alias wget='wget --timeout=0 --tries=0'

log_manual_action "Are you \"Henry Mai\"?"
select answer in "Yes" "No"; do
  case "${answer}" in
    Yes)
      log_task "Updating default packages ..."
      sudo apt update
      yes | sudo apt dist-upgrade
      yes | sudo apt full-upgrade

      log_task "Cloning PGP and SSH ..."
      yes | sudo apt install git gnupg2
      rm --recursive --force "${HOME}"/.pgp "${HOME}"/.ssh
      log_manual_action \
        "Github identity is required, please enter your username and password/access token below"
      git clone --recursive https://github.com/tanducmai/pgp-keys "${HOME}"/.pgp
      fix_ownership_and_permission "pgp"
      log_manual_action \
        "Github identity is required, please enter your username and password/access token below"
      git clone --recursive https://github.com/tanducmai/ssh-keys "${HOME}"/.ssh
      fix_ownership_and_permission "ssh"

      log_task "Importing private keys ..."
      wget --directory-prefix=/tmp \
        https://github.com/tanducmai/dotfiles/raw/master/doc/private-keys.tgz.enc
      openssl aes-256-cbc -salt -pbkdf2 \
        -in /tmp/private-keys.tgz.enc \
        -out /tmp/private-keys.tgz -d
      tar zxvf /tmp/private-keys.tgz -C /tmp
      gpg --allow-secret-key-import --import /tmp/privkey.asc
      rm --verbose --interactive=never \
        /tmp/private-keys.tgz* /tmp/privkey.asc /tmp/id_ed25519

      log_task "Cloning personal vimwiki notes ..."
      git clone --recursive https://github.com/tanducmai/vimwiki "${HOME}"/vimwiki

      log_task "Cloning personal password store ..."
      rm -rf "${HOME}"/.password-store
      git clone --recursive \
        https://github.com/tanducmai/password-store "${HOME}"/.password-store

      log_task "Cloning personal website ..."
      rm -rf "${MYSITE}"
      git clone --recursive \
        https://github.com/tanducmai/tanducmai.com "${MYSITE}"

      log_task "Cloning dot repositories ..."
      rm -rf "${DOTFILES}" "${DOTVIM}"
      git clone --recursive https://github.com/tanducmai/dotfiles.git "${DOTFILES}"
      git clone --recursive https://github.com/tanducmai/dotvim.git "${DOTVIM}"

      break
      ;;
    No)
      log_task "Updating default packages ..."
      sudo apt update
      yes | sudo apt dist-upgrade
      yes | sudo apt full-upgrade

      break
      ;;
    *)
      log_error "1 or 2"
      ;;
  esac
done

log_task "Installing Linux packages ..."
# shellcheck disable=SC2310
for pkg in "${LINUX_PKGS[@]}"; do
  (yes | sudo apt install "${pkg}" 2>> /tmp/install-pkg-error.txt) \
    || (sudo snap install "${pkg}" 2>> /tmp/install-pkg-error.txt \
    || sudo snap install "${pkg}" --classic 2>> /tmp/install-pkg-error.txt)
done
yes | sudo apt autoremove
yes | sudo apt autoclean

log_task "Installing Python packages ..."
for pkg in "${PYTHON_PKGS[@]}"; do
  python3 -m pip install --upgrade --user --no-warn-script-location "${pkg}" \
    2>> /tmp/install-pkg-error.txt
done

log_task "Installing Moby wordlist ..."
wget -O /tmp/moby_words.zip https://www.gutenberg.org/files/3201/files.zip
unzip /tmp/moby_words.zip -d /tmp/moby_words
sudo mv -v /tmp/moby_words /usr/share/dict/moby_words
sudo mv -v /usr/share/dict/moby_words/files/* /usr/share/dict/moby_words/
sudo rmdir -v /usr/share/dict/moby_words/files/
sudo find /usr/share/dict/moby_words/ -type f \
  -name "[[:upper:]]*" -exec mv -v {} {}.utf-8.add \;
sudo find /usr/share/dict/moby_words/ -type f \
  -name "[[:upper:]]*" -exec rename "y/A-Z/a-z/" {} \;
wget -O /tmp/mthesaur.txt https://www.gutenberg.org/files/3202/files/mthesaur.txt
sudo mv -v /tmp/mthesaur.txt /usr/share/dict/moby_words

log_task "Linking dot configuration ..."
symlink_config "git" "gitconfig"
symlink_config "bash" "bash*"
symlink_config "bash" "*rc"
symlink_config "bash" "selected_editor"

log_task "Installing snap ..."
sudo apt install snapd
sudo systemctl enable --now snapd snapd.apparmor

log_task "Linking flatpak ..."
for pkg in flatpak gnome-software-plugin-flatpak; do
  yes | sudo apt install "${pkg}" 2>> /tmp/install-pkg-error.txt
done
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

log_task "Linking user bin directory ..."
ln --symbolic --force --verbose "${DOTFILES}"/bin "${HOME}"/bin

log_task "Booting system with systemd as init system (WSL only)..."
if grep -q microsoft /proc/version; then
  WSL_CONF="/etc/wsl.conf"
  sudo touch "${WSL_CONF}"
  # shellcheck disable=SC2310
  if sudo grep -q "\[boot\]" "${WSL_CONF}" \
    && sudo grep -q "systemd=true" "${WSL_CONF}"; then
    echo "Lines already exist in ${WSL_CONF}"
  else
    echo -e "\n[boot]\nsystemd=true" | sudo tee -a "${WSL_CONF}"
    echo "Lines appended to ${WSL_CONF}"
  fi
  unset -v WSL_CONF
else
  echo "This is not WSL"
fi

log_task "Installing Vim ..."
cd /tmp || exit
git clone https://github.com/vim/vim.git
cd vim/src/ || exit
./configure --with-features=huge --enable-python3interp
make
yes | sudo make install

log_task "Installing git-sh ..."
cd /tmp || exit
git clone https://github.com/rtomayko/git-sh.git
cd git-sh/ || exit
make
yes | sudo make install

log_task "Installing git-info ..."
wget -O /tmp/git-info \
  https://raw.githubusercontent.com/gitbits/git-info/master/git-info
chmod -v 777 /tmp/git-info
sudo mv -v /tmp/git-info /usr/local/bin/git-info

log_task "Installing git-logur ..."
wget -O /tmp/git-logur \
  https://gist.githubusercontent.com/rsvp/3957124731c4c218aa67c215f4f66b97/raw/c9553e00f762d86a0c248d7d4e8469afd6005792/git-logur
chmod -v 777 /tmp/git-logur
sudo mv -v /tmp/git-logur /usr/local/bin/git-logur

log_task "Installing git-lcm ..."
wget -O /tmp/git-lcm \
  https://gist.githubusercontent.com/rsvp/fd93e0b86f325454fbce2b57cabd4ce0/raw/
chmod -v 777 /tmp/git-lcm
sudo mv -v /tmp/git-lcm /usr/local/bin/git-lcm

log_task "Installing git-archive-all ..."
wget -O /tmp/git-archive-all \
  https://raw.githubusercontent.com/fabacab/git-archive-all.sh/master/git-archive-all.sh
chmod -v 777 /tmp/git-archive-all
sudo mv -v /tmp/git-archive-all /usr/local/bin/git-archive-all

log_task "Installing forgit ..."
cd /tmp || exit
git clone https://github.com/wfxr/forgit
sudo mv -v forgit /usr/share/forgit
sudo ln -sfv /usr/share/forgit/completions/git-forgit.bash \
  /etc/bash_completion.d/git-forgit

log_task "Installing dirt ..."
wget -O /tmp/dirt \
  https://gist.githubusercontent.com/rsvp/8089760/raw/dd8d84509a509be5495db3742d893e278fdf4df6/dirt.sh
chmod -v 777 /tmp/dirt
sudo mv -v /tmp/dirt /usr/local/bin/dirt

log_task "Installing telcountry ..."
wget -O /tmp/telcountry \
  https://gist.githubusercontent.com/rsvp/3371208/raw/8fa3e880975a211356fa0126606565a64afe2da1/telcountry.sh
chmod -v 777 /tmp/telcountry
sudo mv -v /tmp/telcountry /usr/local/bin/telcountry

log_task "Installing tagscrape ..."
wget -O /tmp/tagscrape \
  https://gist.githubusercontent.com/rsvp/3095975/raw/3b663b8c4c821d740dfdaf85011128c49ffec459/tagscrape.sh
chmod -v 777 /tmp/tagscrape
sudo mv -v /tmp/tagscrape /usr/local/bin/tagscrape

log_task "Installing locat ..."
wget -O /tmp/locat \
  https://gist.githubusercontent.com/rsvp/2199326/raw/6ff764df4092d83550ac1b81bdf816d05694d3a2/locat.sh
sed -i 's/mlocate/plocate/g' /tmp/locat
chmod -v 777 /tmp/locat
sudo mv -v /tmp/locat /usr/local/bin/locat

log_task "Installing vimv ..."
wget -O /tmp/vimv \
  https://raw.githubusercontent.com/thameera/vimv/master/vimv
chmod -v 777 /tmp/vimv
sudo mv -v /tmp/vimv /usr/local/bin/vimv

log_task "Installing myrepos ..."
wget -O /tmp/mr \
  https://raw.githubusercontent.com/RichiH/myrepos/master/mr
chmod -v 777 /tmp/mr
sudo mv -v /tmp/mr /usr/local/bin/mr

log_task "Installing pandoc-from-markdown-to-pdf ..."
git clone https://github.com/SixArm/pandoc-from-markdown-to-pdf.git \
  /tmp/pandoc-from-markdown-to-pdf
sudo mv -v /tmp/pandoc-from-markdown-to-pdf /usr/local/share/pandoc-from-markdown-to-pdf
sudo chmod -v 777 \
  /usr/local/share/pandoc-from-markdown-to-pdf/pandoc-from-markdown-to-pdf

log_task "Installing fonts required by pandoc-from-markdown-to-pdf ..."
git clone https://github.com/sixarm/pandoc-fonts /tmp/pandoc-fonts
sudo cp -rv /tmp/pandoc-fonts/ /usr/local/share/fonts/

log_task "Installing git-submanage ..."
cd /tmp || exit
git clone https://github.com/idbrii/git-submanage.git
cd git-submanage || exit
chmod -v 777 git-*
sudo mv -v git-* /usr/local/bin

log_task "Installing git completion ..."
wget -O /tmp/git-completion \
  https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
sudo mv -v /tmp/git-completion /etc/bash_completion.d/git-completion

log_task "Installing gpg-encrypt ..."
wget -P "${HOME}"/.local/bin/ \
  https://raw.githubusercontent.com/SixArm/gpg-encrypt/main/gpg-encrypt
chmod -v 777 "${HOME}"/.local/bin/gpg-encrypt

log_task "Installing uri-parser ..."
wget -P "${HOME}"/.local/bin/ \
  https://raw.githubusercontent.com/SixArm/uri-parser/main/uri-parser
chmod -v 777 "${HOME}"/.local/bin/uri-parser

log_task "Installing Vietnamese wordlist ..."
wget -O /tmp/vn_words.zip \
  https://www.informatik.uni-leipzig.de/~duc/software/misc/vn_words.zip
sudo unzip /tmp/vn_words.zip -d /usr/share/dict/vn_words

log_task "Installing English wordlist ..."
sudo mkdir --parents /usr/share/dict
cd /tmp || exit
git clone https://github.com/dwyl/english-words.git
sudo mv -v english-words /usr/share/dict

# log_task "Installing GnuPG ..."
# run_install_script install_gnupg

log_task "Installing WSL Utilities ..."
run_install_script install_wsl_utilities

log_task "Installing whatmask ..."
run_install_script install_whatmask

log_task "Installing pass ..."
run_install_script install_pass

# log_task "Installing PostgreSQL ..."
# run_install_script install_postgres

log_task "Installing docker ..."
run_install_script install_docker

log_task "Installing Node.js ..."
run_install_script install_nodejs

log_task "Installing fzf ..."
yes | sudo apt purge fzf 2>/dev/null
yes | sudo apt autoremove 2>/dev/null
yes | "${DOTVIM}"/pack/file-system/start/fzf/install

log_task "Installing rbenv ..."
curl -fsSL https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-installer \
  | "${SHELL}"

log_task "Adding ruby completions ..."
git clone https://github.com/mernen/completion-ruby.git /tmp/completion-ruby
sudo mv -v /tmp/completion-ruby /usr/share/completion-ruby
cd /usr/share/completion-ruby || exit
sudo find . -type f -name 'completion-*' \
  -exec ln -sfv /usr/share/completion-ruby/{} /etc/bash_completion.d/{} \;

# log_task "Installing firefox ..."
# run_install_script install_firefox

log_task "Installing LibreWolf ..."
run_install_script install_librewolf

log_task "Adding /etc/crontab file ..."
sudo cp -v "${DOTFILES}"/bash/crontab /etc/crontab

log_task "Adding user cron jobs ..."
add_cron "@daily  /usr/bin/yes | ${HOME}/.local/bin/trash-empty 30"
add_cron "@weekly ${DOTFILES}/bin/sort_wordlist"
add_cron "@hourly ${DOTFILES}/bin/upgrade"
add_cron "@hourly /usr/bin/updatedb"

log_task "Setting up bat -> batcat ..."
mkdir -p "${HOME}"/.local/bin
ln -sfv "$(whereis batcat | awk '{ print $2 }')" "${HOME}"/.local/bin/bat

log_task "Installing git-cc ..."
wget -O /tmp/install-git-cc.sh \
  https://raw.githubusercontent.com/SKalt/git-cc/master/scripts/install.sh
bash /tmp/install-git-cc.sh
[[ -f /usr/local/bin/git-cc ]] \
  && sudo chown "${USER}:${USER}" /usr/local/bin/git-cc \
  && sudo chmod -v 777 /usr/local/bin/git-cc

log_task "Installing sudocabulary ..."
wget -O "${HOME}"/.vocab "https://goo.gl/N4EiTq" --no-check-certificate
wget -O "${HOME}"/.vocabscript "https://goo.gl/gI7xKQ" --no-check-certificate
sudo chmod -v 777 "${HOME}"/.vocab

log_task "Adding ansible completion ..."
yes | "${HOME}"/.local/bin/activate-global-python-argcomplete

log_task "Installing go packages ..."
for pkg in "${GO_PKGS[@]}"; do
  go install "${pkg}"@latest 2>> /tmp/install-pkg-error.txt
done

log_task "Adding go completion ..."
yes | "$(go env GOPATH)"/bin/gocomplete -install

log_task "Installing lf ..."
env CGO_ENABLED=0 go install -ldflags="-s -w" github.com/gokcehan/lf@latest
wget -O /tmp/lf https://raw.githubusercontent.com/gokcehan/lf/master/etc/lf.bash
sudo mv -v /tmp/lf /etc/bash_completion.d/lf

log_task "Linking wakatime-cli ..."
# The target file will be available after loading vim for the first time
sudo ln -sfv "${HOME}"/.wakatime/wakatime-cli /usr/bin/wakatime-cli

log_task "Initialising tldr ..."
mkdir -p "${HOME}"/.local/share/tldr/
tldr -u

log_task "Cloning bash-preexec to maintain compatibility using bash-preexec ..."
cd /tmp || exit
git clone https://github.com/rcaloras/bash-preexec.git
sudo mv -v bash-preexec /usr/share

log_task "Adding pip completion ..."
wget -O /tmp/pip \
  https://raw.githubusercontent.com/ekalinin/pip-bash-completion/master/pip
sudo cp -v /tmp/pip /etc/bash_completion.d/

log_task "Installing doq - a requirement of vim-pydocstring ..."
cd "${DOTVIM}"/pack/syntax/start/pydocstring
make install

log_task "Installing commacd ..."
wget -O /tmp/commacd \
  https://raw.githubusercontent.com/shyiko/commacd/master/commacd.sh
sudo mv -v /tmp/commacd /usr/bin/commacd

log_task "Pulling hugo image ..."
sudo docker pull klakegg/hugo:"${HUGO_VERSION}"

log_task "Installing gum ..."
if grep --fixed-strings --line-regexp --quiet "ID=ubuntu" /etc/os-release; then
  sudo mkdir -p /etc/apt/keyrings
  curl -fsSL https://repo.charm.sh/apt/gpg.key \
    | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg
  echo "deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *" \
    | sudo tee /etc/apt/sources.list.d/charm.list
  sudo apt update
  yes | sudo apt install gum
fi

log_task "Disabling interactive restart of outdated services ..."
sudo mkdir /etc/needrestart
sudo touch /etc/needrestart/needrestart.conf
echo -e "\n\$nrconf{restart} = 'a';" | sudo tee -a /etc/needrestart/needrestart.conf

log_task "Enabling firewall ..."
sudo ufw enable

log_task "Installing npm packages ..."
for pkg in "${NPM_PKGS[@]}"; do
  npm install --force --global "${pkg}"@latest 2>> /tmp/install-pkg-error.txt
done

log_task "Installing rustup (choose 1)..."
yes | sudo apt purge rustc 2>/dev/null
yes | sudo apt autoremove 2>/dev/null
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
"${HOME}"/.cargo/bin/rustup update
source "${HOME}/.cargo/env"

log_task "Installing favourite crates for Rust, Rocket, etc. ..."
bash -c "$(wget -qO- https://raw.githubusercontent.com/SixArm/cargo-install-favorites/main/bin/install)"

log_task "Installing starship ..."
cargo install starship

log_task "Installing tokei ..."
cargo install tokei --features all

log_task "Installing exa ..."
cargo install exa
wget -O /tmp/exa \
  https://raw.githubusercontent.com/ogham/exa/master/completions/bash/exa
sudo mv -v /tmp/exa /etc/bash_completion.d/exa

log_task "Installing Copilot extension"
gh extension install github/gh-copilot

end="$(date +%s)"
log_task "Finish installation, taking $((end-start)) seconds."

log_task "Removing any changes made to bashrc and bash_profile during installation ..."
git -C "${DOTFILES}" checkout .
