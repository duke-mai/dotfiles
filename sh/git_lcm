#!/usr/bin/bash

# ======================================================================================
#
#         FILE:  git_lcm
#
#        USAGE:  $ ./git_lcm filename(s) [wildcards]
#
#  DESCRIPTION:  Git script gets LAST COMMIT DATE / TIMES
#                  (since OS modification time is unreliable).
#                Given path/filename(s) -- supports wildcards, SHA hash ref.
#
#     EXAMPLES:  $ ./git_lcm *.py    #  SAMPLE OUTPUT FORMATTING
#                2022-04-26 23:20:34 +0930  fb6bc9af  debugger.py
#                2022-04-27 14:56:39 +0930  52dc80c9  downloader.py
#                2022-04-27 22:47:17 +0930  9566aeb0  calculator.py
#                2022-04-27 23:00:10 +0930  34e8a815  code_viewer.py
#                2022-05-12 22:33:30 +0930  13a934f4  tree.py
#
# DEPENDENCIES:  git-log (built-in)
#      OPTIONS:  ---
#         BUGS:  ---
#       AUTHOR:  ---
#      COMPANY:  ---
#      VERSION:  1.0
#      CREATED:  May 24, 2022
#     REVISION:  ---
#       SOURCE:  https://gist.githubusercontent.com/rsvp/fd93e0b86f325454fbce2b57cabd4ce0/raw/be6c017af4dc328a64de8211dd7f1865615fc1b7/git-lu
#
# ======================================================================================
#

#           _____ PREAMBLE_v3: settings, variables, and error handling.
#
LC_ALL=POSIX
#      locale means "ASCII, US English, no special rules,
#      output per ISO and RFC standards."
#      Esp. use ASCII encoding for glob and sorting characters.
shopt -s   extglob
#     ^set extended glob for pattern matching.
shopt -s   failglob
#         ^failed pattern matching signals error.
set -e
#   ^errors checked: immediate exit if a command has non-zero status.
set -o pipefail
#   ^exit status on fail within pipe, not (default) last command.
set -u
#   ^unassigned variables shall be errors.
#    Example of default VARIABLE ASSIGNMENT:  arg1=${1:-'foo'}

arg1=${1:-'NULL'}

program=${0##*/}   #  similar to using basename
memf=$( mktemp /dev/shm/88_${program}_tmp.XXXXXXXXXX )
mem2=$( mktemp /dev/shm/88_${program}_tmp.XXXXXXXXXX )
errf=$( mktemp /dev/shm/88_${program}_tmp.XXXXXXXXXX )


cleanup () {
     #  Delete temporary files, then optionally exit given status.
     local status=${1:-'0'}
     rm -f $memf $mem2 $errf
     [ $status = '-1' ] ||  exit $status      #  thus -1 prevents exit.
} #--------------------------------------------------------------------
warn () {
     #  Message with basename to stderr.          Usage: warn "message"
     echo -e "\n !!  ${program}: $1 "  >&2
} #--------------------------------------------------------------------
die () {
     #  Exit with status of most recent command or custom status, after
     #  cleanup and warn.      Usage: command || die "message" [status]
     local status=${2:-"$?"}
     #  cat $errf >&2
     cleanup -1  &&   warn "$1"  &&  exit $status
} #--------------------------------------------------------------------
trap "die 'SIG disruption, but cleanup finished.' 114" 1 2 3 15
#    Cleanup after INTERRUPT: 1=SIGHUP, 2=SIGINT, 3=SIGQUIT, 15=SIGTERM
trap "die 'unhandled ERR via trap, but cleanup finished.' 116" ERR
#    Cleanup after command failure unless it's part of a test clause.
#
# _______________     ::  BEGIN  Script ::::::::::::::::::::::::::::::::::::::::


#      __________ PRE-QUALIFY command-line parameters now
#                 because git-log error message is ugly.

[ "$arg1" = 'NULL' ]  &&  die "SPECIFY filename(s), wildcards optional." 113

#        ___ since "in" is omitted, positional parameters assumed, i.e. "$@"
for file     ; do
     [ -e "$file" ]   ||  die "INVALID file specified: $file" 115
done



#      __________ MAIN function

get_date () {
     #   ^Expects a single filename as $1 argument...
     git log -1 --pretty="%ci  %h" -- "$1" > $mem2  2>> $errf
     #          %ci is commit date ISO style: 2017-08-04 09:30:06 -0700
     #          %cd would be commit date without time portion.
     #          %h gives short SHA hash (%H for full hash)
     [ -s $mem2 ]  &&  cat $mem2  ||  echo "0000-00-00 _Not_committed  _No_SHA"
     #                UNCOMMITTED file gets ZEROS date and _No_SHA reference.
}


#        ___ since "in" is omitted, positional parameters assumed, i.e. "$@"
for file     ; do
     echo "$(get_date "$file")  $file"
done > $memf

[ -s $errf ]  &&  die "get_date FAIL. Must be within a git repository." 117



#      __________ Post-production
#      [ ] - Possibly add colors for readability...

sort $memf
#    Dates sorted from 0000-00-00 to most recent commit date.
#    Minor discrepancies possible if commits come from different time zones.



cleanup    #  Instead of: trap arg EXIT
# _______________ EOS ::  END of Script ::::::::::::::::::::::::::::::::::::::::

#  vim: set fileencoding=utf-8 ff=unix tw=78 ai syn=sh :
