#!/usr/bin/bash

# ======================================================================================
#
#         FILE:  export_password_store
#
#        USAGE:  ./export_passwords_store
#
#  DESCRIPTION:  This script securely exports all saved passwords from the password-store
#                (`pass` utility) into a temporary text file.
#                The passwords are decrypted and stored in a file that should be used
#                carefully and deleted after use.
#
#      OPTIONS:  ---
# REQUIREMENTS:  `pass` command must be installed and configured.
#                GnuPG must be configured to decrypt stored passwords.
#         BUGS:  ---
#        NOTES:  The output file should be deleted immediately after use.
#       AUTHOR:  Duke Mai <henryfromvietnam@gmail.com>
#      COMPANY:  ---
#      VERSION:  1.0
#      CREATED:  May 15, 2025
#     REVISION:  ---
#
# ======================================================================================


set -eu

# Enable extended globbing to handle recursive search of password files
shopt -s nullglob globstar

# Define the default password store directory
prefix="${PASSWORD_STORE_DIR:-$HOME/.password-store}"

# Create a secure temporary file to store exported passwords
target_file="$(mktemp /tmp/passwords_from_pass.XXXXXX)"
echo "Exporting passwords to $target_file"

# Ensure the password store directory exists
if [[ ! -d "$prefix" ]]; then
    echo "Error: Password store directory does not exist: $prefix" >&2
    exit 1
fi

# Loop through all encrypted password files (.gpg) in the store directory
for file in "$prefix"/**/*.gpg; do
    # Extract the entry name by removing the directory path and file extension
    name="${file#$prefix/}"  # Remove the store directory prefix
    name="${name%.gpg}"      # Remove the .gpg extension

    # Write the entry name to the output file
    printf "%s\n" "Name: $name" >> "$target_file"

    # Check if `pass` command is available before retrieving passwords
    if command -v pass >/dev/null 2>&1; then
        pass "$name" >> "$target_file"  # Decrypt and append the password to the file
    else
        echo "Error: 'pass' command not found" >&2
        exit 1
    fi

    # Add spacing for readability
    printf "\n\n" >> "$target_file"
done

# Notify the user that passwords have been successfully exported
echo "Passwords exported successfully to $target_file"

# Warning message about sensitive data in the exported file
echo "WARNING: The exported password file contains sensitive data. Delete it immediately after use."
