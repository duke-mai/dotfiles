# Author: Duke Mai <henryfromvietnam@gmail.com>
# Source:
# https://www.durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/

# ------------------------------------------------
#   ____ ___ _____ ____ ___  _   _ _____ ___ ____
#  / ___|_ _|_   _/ ___/ _ \| \ | |  ___|_ _/ ___|
# | |  _ | |  | || |  | | | |  \| | |_   | | |  _
# | |_| || |  | || |__| |_| | |\  |  _|  | | |_| |
#  \____|___| |_| \____\___/|_| \_|_|   |___\____|
#
# ------------------------------------------------

# core {{{
[core]
  editor = /usr/local/bin/vim
  excludesfile = ~/.files/git/gitignore_global
  whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
  pager = less -x4
#}}}

# user {{{
[user]
  name = Duke Mai
  email = henryfromvietnam@gmail.com
  username = duke-mai
  signingKey = F9E91488183ED044

[credential]
  helper = store
#}}}

# commit {{{
[commit]
  template = ~/.files/git/commit_msg
  gpgSign = true
#}}}

# web {{{
[web]
  browser = firefox
#}}}

# init {{{
[init]
  defaultBranch = master
#}}}

# color {{{
[color]
  branch = auto
  diff = auto
  status = auto
  ui = auto
  sh = auto

[color "branch"]
  current = red reverse
  local = blue
  remote = green

[color "diff"]
  meta = yellow
  frag = magenta
  old = red bold
  new = green
  plain = white
  whitespace = red reverse

[color "status"]
  added = yellow
  changed = green
  untracked = cyan
# }}}

# push/pull/diff/options {{{
[push]
  default = current

[pull]
  default = current
  rebase = false

[diff]
  mnemonicprefix = true
  tool = vimdiff

[difftool]
  prompt = false

[branch]
  autosetuprebase = always

[apply]
  whitespace = nowarn
#}}}

# delta {{{
[delta]
  eatures = line-numbers decorations
  line-numbers = true

[delta "decorations"]
  minus-style = red bold normal
  plus-style = green bold normal
  minus-emph-style = white bold red
  minus-non-emph-style = red bold normal
  plus-emph-style = white bold green
  plus-non-emph-style = green bold normal
  file-style = yellow bold none
  file-decoration-style = yellow box
  hunk-header-style = magenta bold
  hunk-header-decoration-style = magenta box
  minus-empty-line-marker-style = normal normal
  plus-empty-line-marker-style = normal normal
  line-numbers-right-format = "{np:^4}â”‚ "
#}}}

# alias {{{
[alias]
  # basic {{{
  rao = remote add origin
  ac = !git add . && git commit -am
  pushitgood = push -u origin --all && echo 'PUSH IT REAL GOOD'
  ; git init
  ; git rao https://url-here.git
  ; git ac "Initial commit"
  ; git pushitgood
  a = add
  ap = add -p
  st = status -s
  cl = clone
  cc = commit
  co = checkout
  br = !git-branch-menu
  r = reset
  cp = cherry-pick
  gr = grep -Ii
  # }}}

  # tweak defaults {{{
  diff = diff --word-diff
  branch = branch -ra
  grep = grep -Ii
  bra = branch -ra
  ai = add --interactive

  # grep on filename
  f = "!git ls-files | grep -i"
  # }}}

  # commit {{{
  commit = commit -v
  cm = commit -m
  cma = commit -a -m
  ca = commit --amend
  amend = commit --amend
  am = commit --amend
  caa = commit -a --amend -C HEAD
  # }}}

  # undo {{{
  unstage = reset HEAD --
  undo-last-commit = reset --soft HEAD~1
  # }}}

  # log commands {{{

  # default look for short git log
  le = log --oneline --decorate
  # list with no colors if you need to chain the out put with Unix pipes:
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

  # list oneline commits showing relative dates:
  ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%an]" --decorate --date=relative
  # list oneline commits showing dates:
  lsd = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  # list commits showing changed files
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [a:%an,c:%cn]" --decorate --numstat

  # list oneline commits showing relative dates of a specific file (e.g., git ls1 vimrc)
  lsf = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%an]" --decorate --date=relative --follow --
  # list oneline commits showing dates of a specific file (e.g., git lsd1 vimrc)
  lsfd = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --follow --
  # list changed files of a commit given a revision (e.g., git lc 38fefc0)
  lc  = "!f() { git ll "${1}"^.."${1}"; }; f"

  # show the history of a file, with diffs
  fl = log -u
  filelog = log -u
  # }}}

  # diff {{{
  d = diff --word-diff
  dc = diff --cached
  ds = diff --staged
  # diff last commit
  dlc = diff --cached HEAD^
  dr  = "!f() { git diff -w "${1}"^.."${1}"; }; f"
  diffr  = "!f() { git diff "${1}"^.."${1}"; }; f"
  # }}}

  # reset commands {{{
  r1 = reset HEAD^
  r2 = reset HEAD^^
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh2 = reset HEAD^^ --hard
  # }}}

  # git svn {{{
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit
  # }}}

  # stash {{{
  sl = stash list
  sa = stash apply
  ss = stash save
  # }}}

  # assume aliases {{{
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  # show assumed files
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  # unassume all the assumed files
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  assumeall = "!git status -s | awk {'print ${2}'} | xargs git assume"
  # }}}

  # subtree {{{
  # add
  sba = "!f() { git subtree add --prefix ${2} ${1} master --squash; }; f"
  # update/pull
  sbu = "!f() { git subtree pull --prefix ${2} ${1} master --squash; }; f"
  # }}}

  # various useful {{{
  # last tag created
  lasttag = describe --tags --abbrev=0
  lt = describe --tags --abbrev=0
  # conflict/merges
  ours = "!f() { git co --ours ${@} && git add ${@}; }; f"
  theirs = "!f() { git co --theirs ${@} && git add ${@}; }; f"
  #list remotes
  rem="!git config -l | grep remote.*url | tail -n +2"
  #apply patch from other local repo
  lap = "!f() { git --git-dir=${1} format-patch -k -1 --stdout ${2} | git am -3 -k; }; f"
  #open markdown files edited in last commit
  last = "!gvim $(git show HEAD --format="" --name-only | grep -e .*md$ | xargs)"
  #open just created markdown in working directory
  newmd = "!gvim $(git status -s | awk {'print ${2}'})"
  # initial empty commit
  empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"
  # list all aliases
  la = "!git config -l | grep alias | cut -c 7-"
  # }}}

  # convoluted aliases {{{
  # grep from root folder
  gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In ${1} | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
  #rename branch tree to done-
  done = "!f() { git branch | grep "${1}" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
  #add bitbucket remote
  ra = "!f() { git remote add ${1} https://bitbucket.org/${2}.git; }; f"
  # }}}

  # worktree list {{{
  wl = worktree list
  # undo from here http://megakemp.com/2016/08/25/git-undo/
  undo = "!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f"
  # }}}

# }}}

# git-sh {{{
[color "sh"]
  branch = yellow reverse
  workdir = blue bold
  dirty = red
  dirty-stash = red
  repo-state = red
# }}}

[rerere]
  enabled = false

[rebase]
  autosquash = true

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[gpg]
  program = gpg2
